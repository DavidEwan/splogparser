using Samples;
using Impl;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SPLogParserTests
{
   [TestClass]
   public class WFPOPENTests
   {
      [TestMethod]
      public void TestWFPOpen()
      {
         (XFSType xfsType, string xfsLine) result = IdentifyLines.XFSLine(samples_general.WFPOPEN);
         Assert.IsTrue(result.xfsType == XFSType.WFPOPEN);
      }
      [TestMethod]
      public void TestWFPClose()
      {
         (XFSType xfsType, string xfsLine) result = IdentifyLines.XFSLine(samples_general.WFPCLOSE);
         Assert.IsTrue(result.xfsType == XFSType.WFPCLOSE);
      }

      [TestMethod]
      public void TestWFPOpenhService()
      {
         (XFSType xfsType, string xfsLine) result = IdentifyLines.XFSLine(samples_general.WFPOPEN);
         (bool success, string xfsMatch, string subLogLine) result2 = WFPOPEN.hServiceFromList(result.xfsLine);
         Assert.IsTrue(int.Parse(result2.xfsMatch) == 35);
      }

      [TestMethod]
      public void TestWFPOpenlpszLogical()
      {
         (XFSType xfsType, string xfsLine) result = IdentifyLines.XFSLine(samples_general.WFPOPEN);
         (bool success, string xfsMatch, string subLogLine) result2 = WFPOPEN.lpszLogicalNameFromList(result.xfsLine);
         Assert.IsTrue(result2.xfsMatch == "Sensors");
      }

      [TestMethod]
      public void TestWFPOpenlpszAppID()
      {
         (XFSType xfsType, string xfsLine) result = IdentifyLines.XFSLine(samples_general.WFPOPEN);
         (bool success, string xfsMatch, string subLogLine) result2 = WFPOPEN.lpszAppIDFromList(result.xfsLine);
         Assert.IsTrue(result2.xfsMatch == "NH XFS AGENT");
      }

      [TestMethod]
      public void TestWFPOpenlpszAppIDWithDot()
      {
         (XFSType xfsType, string xfsLine) result = IdentifyLines.XFSLine(samples_general.WFPOPEN2);
         (bool success, string xfsMatch, string subLogLine) result2 = WFPOPEN.lpszAppIDFromList(result.xfsLine);
         Assert.IsTrue(result2.xfsMatch == "MoniPlus2.Loader.exe");
      }
      
      [TestMethod]
      public void TestWFPOpendevice()
      {
         (XFSType xfsType, string xfsLine) result;
         string deviceName = string.Empty;
         
         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_ReceiptPrinter);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "PTR");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_CardReader);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "IDC");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_CashDispenser);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "CDM");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_Encryptor);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "PIN");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_CheckModule);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "CHK");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_Deposit);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "DEP");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_TextTerminal);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "TTU");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_Sensors);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "SIU");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_VendorDependentMode);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "VDM");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_Camera);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "CAM");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_Alarm);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "ALM");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_CashDeposit);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "CIM");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_BarCodeReader);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "BCR");

         result = IdentifyLines.XFSLine(samples_general.WFPOPEN_ItemProcessor);
         deviceName = WFPOPEN.device(result.xfsLine);
         Assert.IsTrue(deviceName == "IPM");
      }
   }
}
